---
const {
    birthDate,
    totalYears,
    weekData,
    sections,
    showBirthdays = true,
    showTooltips = false,
} = Astro.props as {
    birthDate: string;
    totalYears: number;
    weekData: {
        week: number;
        text: string;
        style: string;
        tooltip?: string;
        image?: string;
    }[];
    sections?: { title: string; startDate: string; endDate: string }[];
    showBirthdays?: boolean;
    showTooltips?: boolean;
};

const MSPerWeek = 7 * 24 * 60 * 60 * 1000;
const WeeksPerYear = 52.1775;

function getStartDate(dateStr: string) {
    const d = new Date(dateStr);
    d.setHours(0, 0, 0, 0);
    return d;
}

function slugify(input: string) {
    return input
        .toLowerCase()
        .trim()
        .replace(/[\s_]+/g, "-")
        .replace(/[^\w-]+/g, "");
}
const startDate = getStartDate(birthDate);

function weekNumber(date: string) {
    return (
        Math.floor(
            (new Date(date).getTime() - startDate.getTime()) / MSPerWeek
        ) + 1
    );
}

const totalWeeks = sections
    ? Math.max(...sections.map((section) => weekNumber(section.endDate)))
    : Math.ceil(WeeksPerYear * totalYears);

function getBirthdayWeeks() {
    if (!showBirthdays) return [];
    const years = Math.ceil(totalWeeks / WeeksPerYear);
    return Array.from({ length: Math.max(0, years - 1) }, (_, i) => {
        const year = i + 1;
        const birthday = new Date(startDate);
        birthday.setFullYear(startDate.getFullYear() + year);
        return (
            Math.floor((birthday.getTime() - startDate.getTime()) / MSPerWeek) +
            1
        );
    });
}

const weekTextMap = new Map(
    weekData.map((week) => [
        week.week,
        {
            text: week.text,
            style: week.style,
            tooltip: week.tooltip,
            image: week.image,
        },
    ])
);

const birthdayWeeks = getBirthdayWeeks();
if (showBirthdays) {
    const birthWeek = weekNumber(birthDate);
    if (!weekTextMap.has(birthWeek)) {
        weekTextMap.set(birthWeek, {
            text: "ðŸ‘¶",
            style: "born",
            tooltip: "Birth week",
            image: undefined,
        });
    }

    birthdayWeeks.forEach((week, index) => {
        if (!weekTextMap.has(week)) {
            weekTextMap.set(week, {
                text: `ðŸŽ‰ ${index + 1}`,
                style: "birthday",
                tooltip: `Birthday ${index + 1}`,
                image: undefined,
            });
        }
    });
}
---

<section class="weeks-container" aria-labelledby="weeks-title">
    {
        sections ? (
            sections.map((section) => {
                const startWeek = weekNumber(section.startDate);
                const endWeek = weekNumber(section.endDate);
                return (
                    <section
                        class="section"
                        aria-labelledby={`section-title-${slugify(section.title)}`}
                    >
                        <h3
                            id={`section-title-${slugify(section.title)}`}
                            tabindex="0"
                            aria-label="Section title"
                        >
                            {section.title}
                        </h3>
                        <div class="weeks" role="list">
                            {Array.from(
                                { length: endWeek - startWeek + 1 },
                                (_, i) => {
                                    const weekNum = startWeek + i;
                                    const weekData = weekTextMap.get(
                                        weekNum
                                    ) || {
                                        text: "",
                                        style: "",
                                        tooltip: "",
                                        image: undefined,
                                    };
                                    const {
                                        text,
                                        style,
                                        tooltip = "",
                                        image,
                                    } = weekData;
                                    return (
                                        <div
                                            class={`week ${style}`}
                                            style={`flex: ${text ? "0 1 auto" : "0 0 15px"};`}
                                            tabindex="0"
                                            role="listitem"
                                            aria-label={
                                                tooltip
                                                    ? tooltip
                                                    : text
                                                      ? text
                                                      : `Week ${weekNum}`
                                            }
                                        >
                                            {text && <span>{text}</span>}
                                            {showTooltips &&
                                                (tooltip || image) && (
                                                    <span
                                                        class={`tooltip ${image ? "has-image" : "text-only"}`}
                                                        role="tooltip"
                                                    >
                                                        {tooltip}
                                                        {image && (
                                                            <img
                                                                src={image}
                                                                alt={
                                                                    tooltip
                                                                        ? tooltip
                                                                        : text
                                                                          ? text
                                                                          : `Week ${weekNum}`
                                                                }
                                                            />
                                                        )}
                                                    </span>
                                                )}
                                        </div>
                                    );
                                }
                            )}
                        </div>
                    </section>
                );
            })
        ) : (
            <div class="weeks" role="list">
                {Array.from({ length: totalWeeks }, (_, i) => {
                    const weekNum = i + 1;
                    const weekData = weekTextMap.get(weekNum) || {
                        text: "",
                        style: "",
                        tooltip: "",
                        image: undefined,
                    };
                    const { text, style, tooltip = "", image } = weekData;
                    return (
                        <div
                            class={`week ${style}`}
                            style={`flex: ${text ? "0 1 auto" : "0 0 15px"};`}
                            tabindex="0"
                            role="listitem"
                            aria-label={
                                tooltip
                                    ? tooltip
                                    : text
                                      ? text
                                      : `Week ${weekNum}`
                            }
                        >
                            {text && <span>{text}</span>}
                            {showTooltips && (tooltip || image) && (
                                <span
                                    class={`tooltip ${image ? "has-image" : "text-only"}`}
                                    role="tooltip"
                                >
                                    {tooltip}
                                    {image && (
                                        <img
                                            src={image}
                                            alt={
                                                tooltip
                                                    ? tooltip
                                                    : text
                                                      ? text
                                                      : `Week ${weekNum}`
                                            }
                                        />
                                    )}
                                </span>
                            )}
                        </div>
                    );
                })}
            </div>
        )
    }
</section>

<style>
    .weeks-container {
        display: flex;
        flex-direction: column;
        gap: 0rem;
        padding: 1rem;
    }
    .weeks {
        display: flex;
        flex-wrap: wrap;
        gap: 4px;
    }

    .week {
        height: 32px;
        border: 1px solid var(--border);
        display: flex;
        align-items: center;
        justify-content: center;
        white-space: nowrap;
        position: relative;
        overflow: visible;
    }

    .week span {
        padding: 0 15px;
    }

    .section h3 {
        margin-bottom: 1rem;
        font-size: var(--text-l);
        font-weight: 600;
    }

    .week .tooltip {
        visibility: hidden;
        opacity: 0;
        background: var(--bg);
        color: var(--text);
        text-align: center;
        border: 1px solid var(--border);
        border-radius: 4px;
        position: absolute;
        z-index: 1;
        bottom: 115%;
        left: 50%;
        transform: translateX(-50%);
        transition: opacity 0.2s;
        pointer-events: none;
        white-space: pre-line;
    }

    .week .tooltip.text-only {
        padding: 6px 10px;
        font-size: 0.7rem;
        min-width: 80px;
        max-width: 220px;
        width: max-content;
    }

    .week .tooltip.has-image {
        padding: 8px 16px;
        font-size: 0.75rem;
        min-width: 120px;
        max-width: 300px;
        width: 300px;
    }

    .week .tooltip img {
        display: block;
        max-width: 200px;
        height: auto;
        margin: 8px auto 0 auto;
        border-radius: 4px;
    }

    .week:hover .tooltip,
    .week:focus-within .tooltip {
        visibility: visible;
        opacity: 1;
    }

    body,
    .weeks-container {
        background: var(--bg);
        color: var(--text);
    }

    .week {
        height: 32px;
        border: 1px solid var(--border);
    }
</style>
