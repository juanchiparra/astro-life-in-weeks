---
const {
  birthDate,
  totalYears,
  weekData,
  sections,
  showBirthdays = true,
  showTooltips = false,
} = Astro.props as {
  birthDate: string;
  totalYears: number;
  weekData: { week: number; text: string; style: string; tooltip?: string }[];
  sections?: { title: string; startDate: string; endDate: string }[];
  showBirthdays?: boolean;
  showTooltips?: boolean;
};

const startDate = new Date(birthDate);
startDate.setHours(0, 0, 0, 0);

const weekNumber = (date: string) => {
  const targetDate = new Date(date);
  const diffInMs = targetDate.getTime() - startDate.getTime();
  return Math.floor(diffInMs / (7 * 24 * 60 * 60 * 1000)) + 1;
};

const totalWeeks = sections
  ? Math.max(...sections.map((section) => weekNumber(section.endDate)))
  : Math.ceil(52.1775 * totalYears);

const birthdayWeeks = showBirthdays
  ? Array.from({ length: Math.ceil(totalWeeks / 52.1775) }).map((_, year) => {
      const birthday = new Date(startDate);
      birthday.setFullYear(startDate.getFullYear() + year);
      const diffInMs = birthday.getTime() - startDate.getTime();
      const weekNumber = Math.floor(diffInMs / (7 * 24 * 60 * 60 * 1000)) + 1;
      return weekNumber;
    })
  : [];

const weekTextMap = new Map(
  weekData.map((week) => [
    week.week,
    { text: week.text, style: week.style, tooltip: week.tooltip },
  ]),
);

if (showBirthdays) {
  birthdayWeeks.forEach((week, index) => {
    const birthdayNumber = index;
    weekTextMap.set(week, {
      text: `ðŸŽ‰ ${birthdayNumber}`,
      style: "birthday",
      tooltip: "",
    });
  });
}
---

<div class="weeks-container">
  {
    sections ? (
      sections.map((section) => {
        const startWeek = weekNumber(section.startDate);
        const endWeek = weekNumber(section.endDate);
        return (
          <div class="section">
            <h3>{section.title}</h3>
            <div class="weeks">
              {Array.from({ length: endWeek - startWeek + 1 }).map(
                (_, index) => {
                  const weekNumber = startWeek + index;
                  const weekData = weekTextMap.get(weekNumber) || {
                    text: "",
                    style: "",
                    tooltip: "",
                  };
                  const text = weekData.text;
                  const style = weekData.style;
                  const tooltip = weekData.tooltip ?? "";
                  return (
                    <div
                      class={`week ${style}`}
                      style={`flex: ${text ? "0 1 auto" : "0 0 15px"};`}
                    >
                      {text && <span>{text}</span>}
                      {showTooltips && tooltip && (
                        <span class="tooltip">{tooltip}</span>
                      )}
                    </div>
                  );
                },
              )}
            </div>
          </div>
        );
      })
    ) : (
      <div class="weeks">
        {Array.from({ length: totalWeeks }).map((_, index) => {
          const weekNumber = index + 1;
          const weekData = weekTextMap.get(weekNumber) || {
            text: "",
            style: "",
            tooltip: "",
          };
          const text = weekData.text;
          const style = weekData.style;
          const tooltip = weekData.tooltip;
          return (
            <div
              class={`week ${style}`}
              style={`flex: ${text ? "0 1 auto" : "0 0 15px"};`}
            >
              {text && <span>{text}</span>}
              {showTooltips && tooltip && (
                <span class="tooltip">{tooltip}</span>
              )}
            </div>
          );
        })}
      </div>
    )
  }
</div>

<style>
  .weeks-container {
    display: flex;
    flex-direction: column;
    gap: 0rem;
    padding: 1rem;
  }
  .weeks {
    display: flex;
    flex-wrap: wrap;
    gap: 4px;
  }

  .week {
    height: 32px;
    border: 1px solid var(--gray);
    display: flex;
    align-items: center;
    justify-content: center;
    white-space: nowrap;
  }

  .week span {
    padding: 0 15px;
  }

  .section h3 {
    margin-bottom: 1rem;
    font-size: var(--text-l);
    font-weight: 600;
  }

  .week {
    position: relative;
    overflow: visible;
  }

  .week .tooltip {
    visibility: hidden;
    opacity: 0;
    background: #181616;
    color: #fff;
    text-align: center;
    border: 1px solid var(--gray);
    border-radius: 4px;
    padding: 8px 16px;
    position: absolute;
    z-index: 1;
    bottom: 115%;
    left: 50%;
    transform: translateX(-50%);
    transition: opacity 0.2s;
    font-size: 0.75rem;
    pointer-events: none;
    white-space: pre-line;
    width: 300px;
    min-width: 80px;
    max-width: 300px;
  }

  .week:hover .tooltip,
  .week:focus-within .tooltip {
    visibility: visible;
    opacity: 1;
  }
</style>
