---
import type { WeekItem, SectionItem } from "../types";
import {
    MS_PER_WEEK,
    getStartDate as utilGetStartDate,
    startOfISOWeek,
    formatDate,
    getWeekStartDate as utilGetWeekStartDate,
    weekNumberFromDateISO,
    weekNumberFromStringISO,
    getBirthdayWeeks as utilGetBirthdayWeeks,
} from "../utils/date";

const {
    birthDate,
    totalYears,
    weekData,
    sections,
    showBirthdays = true,
    showTooltips = false,
} = Astro.props as {
    birthDate: string;
    totalYears: number;
    weekData: WeekItem[];
    sections?: SectionItem[];
    showBirthdays?: boolean;
    showTooltips?: boolean;
};

const WeeksPerYear = 52.1775;

const startDate = utilGetStartDate(birthDate);

function slugify(input: string) {
    return input
        .toLowerCase()
        .trim()
        .replace(/[\s_]+/g, "-")
        .replace(/[^\w-]+/g, "");
}

function getWeekStartDateLocal(weekNum: number) {
    return utilGetWeekStartDate(startDate, weekNum);
}

const todayWeek = weekNumberFromDateISO(startDate, new Date());

function weekNumber(date: string) {
    return weekNumberFromStringISO(startDate, date);
}

const totalWeeks = sections
    ? Math.max(
          ...(sections as SectionItem[]).map((section) =>
              weekNumber(section.endDate)
          )
      )
    : Math.ceil(WeeksPerYear * totalYears);

function getBirthdayWeeksLocal() {
    if (!showBirthdays) return [];
    return utilGetBirthdayWeeks(startDate, totalWeeks);
}

const weekTextMap = new Map(
    weekData.map((week) => [
        week.week,
        {
            text: week.text,
            style: week.style,
            tooltip: week.tooltip,
            image: week.image,
        },
    ])
);

const birthdayWeeks = getBirthdayWeeksLocal();
if (showBirthdays) {
    const birthWeek = weekNumber(birthDate);
    if (!weekTextMap.has(birthWeek)) {
        weekTextMap.set(birthWeek, {
            text: "ðŸ‘¶",
            style: "born",
            tooltip: "Birth week",
            image: undefined,
        });
    }

    birthdayWeeks.forEach((week, index) => {
        if (!weekTextMap.has(week)) {
            weekTextMap.set(week, {
                text: `ðŸŽ‰ ${index + 1}`,
                style: "birthday",
                tooltip: `Birthday ${index + 1}`,
                image: undefined,
            });
        }
    });
}
---

<section
    class="weeks-container"
    aria-labelledby="weeks-title"
    data-start-date={birthDate}
>
    {
        sections ? (
            sections.map((section) => {
                const startWeek = weekNumber(section.startDate);
                const endWeek = weekNumber(section.endDate);
                return (
                    <section
                        class="section"
                        aria-labelledby={`section-title-${slugify(section.title)}`}
                    >
                        <h3
                            id={`section-title-${slugify(section.title)}`}
                            tabindex="0"
                            aria-label="Section title"
                        >
                            {section.title}
                        </h3>
                        <div class="weeks" role="list">
                            {Array.from(
                                { length: endWeek - startWeek + 1 },
                                (_, i) => {
                                    const weekNum = startWeek + i;
                                    const wk = weekTextMap.get(weekNum) || {
                                        text: "",
                                        style: "",
                                        tooltip: "",
                                        image: undefined as string | undefined,
                                    };
                                    const {
                                        text,
                                        style,
                                        tooltip = "",
                                        image,
                                    } = wk;
                                    const stateClass =
                                        weekNum < todayWeek
                                            ? "past"
                                            : weekNum === todayWeek
                                              ? "today"
                                              : "future";
                                    const isBirthdayStyle =
                                        style === "birthday" ||
                                        style === "born";
                                    const tooltipText =
                                        tooltip ||
                                        (!isBirthdayStyle
                                            ? `Starts: ${formatDate(startOfISOWeek(getWeekStartDateLocal(weekNum)))}`
                                            : "");
                                    return (
                                        <div
                                            class={`week ${style} ${stateClass}`}
                                            style={`flex: ${text ? "0 1 auto" : "0 0 15px"};`}
                                            tabindex="0"
                                            role="listitem"
                                            data-week={weekNum}
                                            aria-label={
                                                tooltipText
                                                    ? tooltipText
                                                    : text
                                                      ? text
                                                      : `Week ${weekNum}`
                                            }
                                            aria-current={
                                                weekNum === todayWeek
                                                    ? "date"
                                                    : undefined
                                            }
                                        >
                                            {text && <span>{text}</span>}
                                            {showTooltips &&
                                                (tooltipText || image) && (
                                                    <span
                                                        class={`tooltip ${image ? "has-image" : "text-only"}`}
                                                        role="tooltip"
                                                    >
                                                        {tooltipText}
                                                        {image && (
                                                            <img
                                                                src={image}
                                                                alt={
                                                                    tooltipText
                                                                        ? tooltipText
                                                                        : text
                                                                          ? text
                                                                          : `Week ${weekNum}`
                                                                }
                                                            />
                                                        )}
                                                    </span>
                                                )}
                                        </div>
                                    );
                                }
                            )}
                        </div>
                    </section>
                );
            })
        ) : (
            <div class="weeks" role="list">
                {Array.from({ length: totalWeeks }, (_, i) => {
                    const weekNum = i + 1;
                    const wk = weekTextMap.get(weekNum) || {
                        text: "",
                        style: "",
                        tooltip: "",
                        image: undefined as string | undefined,
                    };
                    const { text, style, tooltip = "", image } = wk;
                    const stateClass =
                        weekNum < todayWeek
                            ? "past"
                            : weekNum === todayWeek
                              ? "today"
                              : "future";
                    const isBirthdayStyle =
                        style === "birthday" || style === "born";
                    const tooltipText =
                        tooltip ||
                        (!isBirthdayStyle
                            ? `Starts: ${formatDate(startOfISOWeek(getWeekStartDateLocal(weekNum)))}`
                            : "");
                    return (
                        <div
                            class={`week ${style} ${stateClass}`}
                            style={`flex: ${text ? "0 1 auto" : "0 0 15px"};`}
                            tabindex="0"
                            role="listitem"
                            data-week={weekNum}
                            aria-label={
                                tooltipText
                                    ? tooltipText
                                    : text
                                      ? text
                                      : `Week ${weekNum}`
                            }
                            aria-current={
                                weekNum === todayWeek ? "date" : undefined
                            }
                        >
                            {text && <span>{text}</span>}
                            {showTooltips && (tooltipText || image) && (
                                <span
                                    class={`tooltip ${image ? "has-image" : "text-only"}`}
                                    role="tooltip"
                                >
                                    {tooltipText}
                                    {image && (
                                        <img
                                            src={image}
                                            alt={
                                                tooltipText
                                                    ? tooltipText
                                                    : text
                                                      ? text
                                                      : `Week ${weekNum}`
                                            }
                                        />
                                    )}
                                </span>
                            )}
                        </div>
                    );
                })}
            </div>
        )
    }
</section>

<script type="module">
    import {
        getStartDate as utilGetStartDate,
        weekNumberFromDateISO,
    } from "../utils/date";
    (function () {
        const container = document.querySelector(".weeks-container");
        if (!container) return;
        const startStr = container.getAttribute("data-start-date");
        if (!startStr) return;
        const start = utilGetStartDate(startStr);
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        const todayWeek = weekNumberFromDateISO(start, today);
        const weeks = container.querySelectorAll(".week[data-week]");
        weeks.forEach((el) => {
            const n = parseInt(el.getAttribute("data-week") || "0", 10);
            el.classList.remove("past", "today", "future");
            el.removeAttribute("aria-current");
            if (n < todayWeek) {
                el.classList.add("past");
            } else if (n === todayWeek) {
                el.classList.add("today");
                el.setAttribute("aria-current", "date");
            } else {
                el.classList.add("future");
            }
        });
    })();
</script>

<style>
    .weeks-container {
        display: flex;
        flex-direction: column;
        gap: 0rem;
        padding: 1rem;
    }
    .weeks {
        display: flex;
        flex-wrap: wrap;
        gap: 4px;
    }

    .week {
        height: 32px;
        border: 1px solid var(--border);
        display: flex;
        align-items: center;
        justify-content: center;
        white-space: nowrap;
        position: relative;
        overflow: visible;
    }

    .week span {
        padding: 0 15px;
    }

    .week.past {
        /* Default style */
    }

    .week.today {
        /* Default style */
    }

    .week.future {
        opacity: 0.45;
    }

    .section h3 {
        margin-bottom: 1rem;
        font-size: var(--text-l);
        font-weight: 600;
    }

    .week .tooltip {
        visibility: hidden;
        opacity: 0;
        background: var(--bg);
        color: var(--text);
        text-align: center;
        border: 1px solid var(--border);
        border-radius: 4px;
        position: absolute;
        z-index: 1;
        bottom: 115%;
        left: 50%;
        transform: translateX(-50%);
        transition: opacity 0.2s;
        pointer-events: none;
        white-space: pre-line;
    }

    .week .tooltip.text-only {
        padding: 6px 10px;
        font-size: 0.7rem;
        min-width: 80px;
        max-width: 220px;
        width: max-content;
    }

    .week .tooltip.has-image {
        padding: 8px 16px;
        font-size: 0.75rem;
        min-width: 120px;
        max-width: 300px;
        width: 300px;
    }

    .week .tooltip img {
        display: block;
        max-width: 200px;
        height: auto;
        margin: 8px auto 0 auto;
        border-radius: 4px;
    }

    .week:hover .tooltip,
    .week:focus-within .tooltip {
        visibility: visible;
        opacity: 1;
    }

    body,
    .weeks-container {
        background: var(--bg);
        color: var(--text);
    }

    .week {
        height: 32px;
        border: 1px solid var(--border);
    }
</style>
